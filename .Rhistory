xlab = "b1/100 (log odds ratio)", ylab = "Power",
xlim = c(0, 68), ylim = c(0, 1), add = F)
matplot(y = t(r3.alt), type = "l", lty = "dotdash", lwd = 2, col = 8, add = T)
legend("right",
c("N = 100", "N = 200", "N = 300", "N = 400", "N = 500"),
cex=0.8, fill = 3:7)
legend("bottom", "calculated powers", cex=0.8, fill = 8)
out.r5.e = vector()
for(i in 1:nrow(combo2)){
out = gen.df(beta = c(combo2[i,3], combo2[i,2], combo2[i,4]),
n = combo2[i,1], rho = rho,
dist = "normal", multi = T)
pwr = calc_pwr_emp(b0 = combo2[i,3],
b1 = combo2[i,2],
b2 = combo2[i,4],
xmat = out$xmat,
reg = "multi")
out.r5.e[i] = pwr
}
r5.e = matrix(out.r5.e, nrow = length(samp_sizes))
out.r5 = vector()
for(i in 1:nrow(combo2)){
out = gen.df(beta = c(combo2[i,3], combo2[i,2], combo2[i,4]),
n = combo2[i,1], rho = rho,
dist = "normal", multi = T)
pwr = approx_pwr(b0 = combo2[i,3],
b1 = combo2[i,2],
b2 = combo2[i,4],
n = combo2[i,1])
out.r5[i] = pwr
}
r5 = matrix(out.r5, nrow = 5)
out.r5.alt.e = vector()
for(i in 1:nrow(combo3)){
out = gen.df(beta = c(combo3[i,3], combo3[i,2], combo3[i,4]),
n = combo3[i,1], rho = rho,
dist = "normal", multi = T)
pwr = calc_pwr_emp(b0 = combo3[i,3],
b1 = combo3[i,2],
b2 = combo3[i,4],
xmat = out$xmat,
reg = "multi")
out.r5.alt.e[i] = pwr
}
r5.alt.e = matrix(out.r5.alt.e, nrow = 5)
out.r5.alt = vector()
for(i in 1:nrow(combo3)){
out = gen.df(beta = c(combo3[i,3], combo3[i,2], combo3[i,4]),
n = combo3[i,1], rho = rho,
dist = "normal", multi = T)
pwr = approx_pwr(b0 = combo3[i,3],
b1 = combo3[i,2],
b2 = combo3[i,4],
n = combo3[i,1])
out.r5.alt[i] = pwr
}
r5.alt = matrix(out.r5.alt, nrow = 5)
matplot(y = t(r5.alt.e), type = "l", lty = "dotdash", lwd = 2, col = 3:7,
main = "Estimated power for varying sample and log odds ratio",
sub = paste("case proportion = ", proportions[3]*100, "%"),
xlab = "b1/100 (log odds ratio)", ylab = "Power",
xlim = c(0, 68), ylim = c(0, 1), add = F)
matplot(y = t(r5.alt), type = "l", lty = "dotdash", lwd = 2, col = 8, add = T)
legend("right",
c("N = 100", "N = 200", "N = 300", "N = 400", "N = 500"),
cex=0.8, fill = 3:7)
legend("bottom", "calculated powers", cex=0.8, fill = 8)
# HighDBP ~ RIDAGEYR
b1hat1 = calc_effect_size_emp(xmat=xmat_nhanes_univ, prop=prop_nhanes, targetpwr=target_power, alpha=0.05, reg = "uni", lower = 0, upper = 0.2)
# HighDBP ~ RIDAGEYR
b1hat1 = calc_effect_size_emp(xmat=xmat_nhanes_univ, prop=prop_nhanes, targetpwr=target_power, alpha=0.05, reg = "uni", lower = 0, upper = 0.12)
shiny::runApp('~/OneDrive-UW/Thesis/powerlog.shiny')
runApp('~/OneDrive-UW/Thesis/powerlog.shiny')
runApp('~/OneDrive-UW/Thesis/powerlog.shiny')
Ns = seq.int(from = 50, to = 1000, by = 50)
# also make this a smooth line
algo_pwr = as.data.frame(
do.call(
rbind, lapply(
Ns, function(n){calc_more_pwr(beta, n, alpha, dist = "normal")})
)); colnames(algo_pwr) = c(1:5)
hsieh_pwr = as.data.frame(
do.call(
rbind, lapply(
Ns, function(n){calc_pwr_t(beta, n, alpha)})
)); colnames(hsieh_pwr) = c(1:5)
wtm_pwr = as.data.frame(
do.call(
rbind, lapply(
Ns, function(n){calc_pwr_wtm(beta, n, alpha)})
)); colnames(wtm_pwr) = c(1:5)
sim_pwr = readRDS("sim_pwr.RDS")
sim_Ns = apply(sim_pwr, 2, function(pwr) 10*min(which(pwr >= .8))); sim_Ns
algo_Ns = apply(algo_pwr, 2, function(pwr) 10*min(which(pwr >= .8))); algo_Ns
heish_Ns = apply(hsieh_pwr, 2, function(pwr) 10*min(which(pwr >= .8))); heish_Ns
wtm_Ns = apply(wtm_pwr, 2, function(pwr) 10*min(which(pwr >= .8))); wtm_Ns
??lines
plot(Ns, sim_pwr[,3], ylim = c(0, 1.0),
xlab = "sample size", ylab = "power", type = "l",
main = "Power vs. sample size when p = 0.27")
grid(53, 27)
lines(Ns, algo_pwr[,3], cex = 0.8, col = "slateblue")
lines(Ns, hsieh_pwr[,3], cex = 0.8, col = "forestgreen")
lines(Ns, wtm_pwr[,3], cex = 0.8, col = "hotpink")
legend(20, 0.95, pch=15, cex=0.8,
legend=c("Schoenfeld & Borenstein", "Hsieh(t-test)", "Whittemore"),
col=c("slateblue", "forestgreen", "hotpink"))
plot(Ns, sim_pwr[,3], ylim = c(0, 1.0),
xlab = "sample size", ylab = "power", type = "l", cex = 2,
main = "Power vs. sample size when p = 0.27")
grid(53, 27)
lines(Ns, algo_pwr[,3], cex = 2, col = "slateblue")
lines(Ns, hsieh_pwr[,3], cex = 2, col = "forestgreen")
lines(Ns, wtm_pwr[,3], cex = 2, col = "hotpink")
legend(20, 0.95, pch=15, cex = 2,
legend=c("Schoenfeld & Borenstein", "Hsieh(t-test)", "Whittemore"),
col=c("slateblue", "forestgreen", "hotpink"))
plot(Ns, sim_pwr[,3], ylim = c(0, 1.0),
xlab = "sample size", ylab = "power", type = "l", cex = 2,
main = "Power vs. sample size when p = 0.27")
grid(53, 27)
lines(Ns, algo_pwr[,3], cex = 2, col = "slateblue")
lines(Ns, hsieh_pwr[,3], cex = 2, col = "forestgreen")
lines(Ns, wtm_pwr[,3], cex = 2, col = "hotpink")
legend(20, 0.95, pch=15, cex = 1,
legend=c("Schoenfeld & Borenstein", "Hsieh(t-test)", "Whittemore"),
col=c("slateblue", "forestgreen", "hotpink"))
legend(10, 20, pch=15, cex = 1,
legend=c("Schoenfeld & Borenstein", "Hsieh(t-test)", "Whittemore"),
col=c("slateblue", "forestgreen", "hotpink"))
plot(Ns, sim_pwr[,3], ylim = c(0, 1.0),
xlab = "sample size", ylab = "power", type = "l", cex = 2,
main = "Power vs. sample size when p = 0.27")
grid(53, 27)
lines(Ns, algo_pwr[,3], cex = 2, col = "slateblue")
lines(Ns, hsieh_pwr[,3], cex = 2, col = "forestgreen")
lines(Ns, wtm_pwr[,3], cex = 2, col = "hotpink")
legend(10, 20, pch=15, cex = 1,
legend=c("Schoenfeld & Borenstein", "Hsieh(t-test)", "Whittemore"),
col=c("slateblue", "forestgreen", "hotpink"))
plot(Ns, sim_pwr[,3], ylim = c(0, 1.0),
xlab = "sample size", ylab = "power", type = "l", cex = 2,
main = "Power vs. sample size when p = 0.27")
grid(53, 27)
lines(Ns, algo_pwr[,3], cex = 2, col = "slateblue")
lines(Ns, hsieh_pwr[,3], cex = 2, col = "forestgreen")
lines(Ns, wtm_pwr[,3], cex = 2, col = "hotpink")
legend(20, 0.5, pch=15, cex = 1,
legend=c("Schoenfeld & Borenstein", "Hsieh(t-test)", "Whittemore"),
col=c("slateblue", "forestgreen", "hotpink"))
plot(Ns, sim_pwr[,3], ylim = c(0, 1.0),
xlab = "sample size", ylab = "power", type = "l", cex = 2,
main = "Power vs. sample size when p = 0.27")
grid(53, 27)
lines(Ns, algo_pwr[,3], cex = 2, col = "slateblue")
lines(Ns, hsieh_pwr[,3], cex = 2, col = "forestgreen")
lines(Ns, wtm_pwr[,3], cex = 2, col = "hotpink")
legend(20, 0.95, pch=15, cex = 1,
legend=c("Schoenfeld & Borenstein", "Hsieh(t-test)", "Whittemore"),
col=c("slateblue", "forestgreen", "hotpink"))
plot(Ns, sim_pwr[,3], ylim = c(0, 1.0),
xlab = "sample size", ylab = "power", type = "l", cex = 2,
main = "Power vs. sample size when p = 0.27")
grid(53, 27)
lines(Ns, algo_pwr[,3], cex = 2, col = "slateblue")
lines(Ns, hsieh_pwr[,3], cex = 2, col = "forestgreen")
lines(Ns, wtm_pwr[,3], cex = 2, col = "hotpink")
legend(10, 0.05, pch=15, cex = 1,
legend=c("Schoenfeld & Borenstein", "Hsieh(t-test)", "Whittemore"),
col=c("slateblue", "forestgreen", "hotpink"))
xlab = "sample size", ylab = "power", type = "l", cex = 2,
main = "Power vs. sample size when p = 0.27")
grid(53, 27)
lines(Ns, algo_pwr[,3], cex = 2, col = "slateblue")
lines(Ns, hsieh_pwr[,3], cex = 2, col = "forestgreen")
lines(Ns, wtm_pwr[,3], cex = 2, col = "hotpink")
legend(20, 0.05, pch=15, cex = 1,
legend=c("Schoenfeld & Borenstein", "Hsieh(t-test)", "Whittemore"),
col=c("slateblue", "forestgreen", "hotpink"))
plot(Ns, sim_pwr[,3], ylim = c(0, 1.0),
xlab = "sample size", ylab = "power", type = "l", cex = 2,
main = "Power vs. sample size when p = 0.27")
grid(53, 27)
lines(Ns, algo_pwr[,3], cex = 2, col = "slateblue")
lines(Ns, hsieh_pwr[,3], cex = 2, col = "forestgreen")
lines(Ns, wtm_pwr[,3], cex = 2, col = "hotpink")
legend(10, 0.5, pch=15, cex = 1,
legend=c("Schoenfeld & Borenstein", "Hsieh(t-test)", "Whittemore"),
col=c("slateblue", "forestgreen", "hotpink"))
plot(Ns, sim_pwr[,3], ylim = c(0, 1.0),
xlab = "sample size", ylab = "power", type = "l", cex = 2,
main = "Power vs. sample size when p = 0.27")
grid(53, 27)
lines(Ns, algo_pwr[,3], cex = 2, col = "slateblue")
lines(Ns, hsieh_pwr[,3], cex = 2, col = "forestgreen")
lines(Ns, wtm_pwr[,3], cex = 2, col = "hotpink")
legend(900, 0.5, pch=15, cex = 1,
legend=c("Schoenfeld & Borenstein", "Hsieh(t-test)", "Whittemore"),
col=c("slateblue", "forestgreen", "hotpink"))
plot(Ns, sim_pwr[,3], ylim = c(0, 1.0),
xlab = "sample size", ylab = "power", type = "l", cex = 2,
main = "Power vs. sample size when p = 0.27")
grid(53, 27)
lines(Ns, algo_pwr[,3], cex = 2, col = "slateblue")
lines(Ns, hsieh_pwr[,3], cex = 2, col = "forestgreen")
lines(Ns, wtm_pwr[,3], cex = 2, col = "hotpink")
legend(600, 0.5, pch=15, cex = 1,
legend=c("Schoenfeld & Borenstein", "Hsieh(t-test)", "Whittemore"),
col=c("slateblue", "forestgreen", "hotpink"))
plot(Ns, sim_pwr[,3], ylim = c(0, 1.0),
xlab = "sample size", ylab = "power", type = "l", cex = 2,
main = "Power vs. sample size when p = 0.27")
grid(53, 27)
lines(Ns, algo_pwr[,3], cex = 2, col = "slateblue")
lines(Ns, hsieh_pwr[,3], cex = 2, col = "forestgreen")
lines(Ns, wtm_pwr[,3], cex = 2, col = "hotpink")
legend(600, 0.5, pch=15, cex = 2,
legend=c("Simulation", "Schoenfeld & Borenstein", "Hsieh(t-test)", "Whittemore"),
col=c("black", "slateblue", "forestgreen", "hotpink"))
plot(Ns, sim_pwr[,3], ylim = c(0, 1.0),
xlab = "sample size", ylab = "power", type = "l", cex = 2,
main = "Power vs. sample size when p = 0.27")
grid(53, 27)
lines(Ns, algo_pwr[,3], cex = 2, col = "slateblue")
lines(Ns, hsieh_pwr[,3], cex = 2, col = "forestgreen")
lines(Ns, wtm_pwr[,3], cex = 2, col = "hotpink")
legend(600, 0.5, pch=15, cex = 1.5,
legend=c("Simulation", "Schoenfeld & Borenstein", "Hsieh(t-test)", "Whittemore"),
col=c("black", "slateblue", "forestgreen", "hotpink"))
plot(Ns, sim_pwr[,3], ylim = c(0, 1.0),
xlab = "sample size", ylab = "power", type = "l", cex = 2,
main = "Power vs. sample size when p = 0.27")
grid(53, 27)
lines(Ns, algo_pwr[,3], cex = 2, col = "slateblue")
lines(Ns, hsieh_pwr[,3], cex = 2, col = "forestgreen")
lines(Ns, wtm_pwr[,3], cex = 2, col = "hotpink")
legend(400, 0.5, pch=15, cex = 1.25,
legend=c("Simulation", "Schoenfeld & Borenstein", "Hsieh(t-test)", "Whittemore"),
col=c("black", "slateblue", "forestgreen", "hotpink"))
par(mfrow=c(1,3))
plot(Ns, sim_pwr[,3], ylim = c(0, 1.0),
xlab = "sample size", ylab = "power", type = "l", cex = 2,
main = "Power vs. sample size when p = 0.27")
grid(53, 27)
lines(Ns, algo_pwr[,3], cex = 2, col = "slateblue")
lines(Ns, hsieh_pwr[,3], cex = 2, col = "forestgreen")
lines(Ns, wtm_pwr[,3], cex = 2, col = "hotpink")
legend(400, 0.5, pch=15, cex = 1.5,
legend=c("Simulation", "Schoenfeld & Borenstein", "Hsieh(t-test)", "Whittemore"),
col=c("black", "slateblue", "forestgreen", "hotpink"))
par(mfrow=c(1,3))
plot(Ns, sim_pwr[,3], ylim = c(0, 1.0),
xlab = "sample size", ylab = "power", type = "l", cex = 2,
main = "Power vs. sample size when p = 0.27")
grid(53, 27)
lines(Ns, algo_pwr[,3], cex = 2, col = "slateblue")
lines(Ns, hsieh_pwr[,3], cex = 2, col = "forestgreen")
lines(Ns, wtm_pwr[,3], cex = 2, col = "hotpink")
legend(400, 0.5, pch=15, cex = 1.5,
legend=c("Simulation", "Schoenfeld & Borenstein", "Hsieh(t-test)", "Whittemore"),
col=c("black", "slateblue", "forestgreen", "hotpink"))
plot(Ns, sim_pwr[,3], ylim = c(0, 1.0),
xlab = "sample size", ylab = "power", type = "l", cex = 2,
main = "Power vs. sample size when p = 0.27")
grid(53, 27)
lines(Ns, algo_pwr[,3], cex = 2, col = "slateblue")
lines(Ns, hsieh_pwr[,3], cex = 2, col = "forestgreen")
lines(Ns, wtm_pwr[,3], cex = 2, col = "hotpink")
legend(400, 0.5, pch=15, cex = 1.25,
legend=c("Simulation", "Schoenfeld & Borenstein", "Hsieh(t-test)", "Whittemore"),
col=c("black", "slateblue", "forestgreen", "hotpink"))
plot(Ns, sim_pwr[,3], ylim = c(0, 1.0),
xlab = "sample size", ylab = "power", type = "l", cex = 2,
main = "Power vs. sample size when p = 0.27")
grid(53, 27)
lines(Ns, algo_pwr[,3], cex = 2, col = "slateblue")
lines(Ns, hsieh_pwr[,3], cex = 2, col = "forestgreen")
lines(Ns, wtm_pwr[,3], cex = 2, col = "hotpink")
legend(400, 0.5, pch=15, cex = 1.25,
legend=c("Simulation", "Corrected S-B", "Hsieh", "Whittemore"),
col=c("black", "slateblue", "forestgreen", "hotpink"))
plot(Ns, sim_pwr[,3], ylim = c(0, 1.0),
xlab = "sample size", ylab = "power", type = "l", cex = 2,
main = "Power vs. sample size when p = 0.27")
grid(53, 27)
lines(Ns, algo_pwr[,3], cex = 2, col = "slateblue")
lines(Ns, hsieh_pwr[,3], cex = 2, col = "forestgreen")
lines(Ns, wtm_pwr[,3], cex = 2, col = "hotpink")
legend(400, 0.5, pch=15, cex = 1.25,
legend=c("Simulation", "Corrected S-B", "Hsieh", "Whittemore"),
col=c("black", "slateblue", "forestgreen", "hotpink"))
plot(Ns, sim_pwr[,4], ylim = c(0, 1.0), type = "l", cex = 2,
xlab = "sample size", ylab = "power",
main = "Power vs. sample size when p = 0.5")
grid(53, 27)
lines(Ns, algo_pwr[,4], cex = 2, col = "slateblue")
lines(Ns, hsieh_pwr[,4],  cex = 2, col = "forestgreen")
lines(Ns, wtm_pwr[,4], cex = 2, col = "hotpink")
plot(Ns, sim_pwr[,5], ylim = c(0, 1.0), type = "l",
xlab = "sample size", ylab = "power",
main = "Power vs. sample size when p = 0.73")
grid(53, 27)
lines(Ns, algo_pwr[,5], cex = 2, col = "slateblue")
lines(Ns, hsieh_pwr[,5], cex = 2, col = "forestgreen")
lines(Ns, wtm_pwr[,5], cex = 2, col = "hotpink")
ut.r5.e = vector()
for(i in 1:nrow(combo2)){
out = gen.df(beta = c(combo2[i,3], combo2[i,2], combo2[i,4]),
n = combo2[i,1], rho = rho,
dist = "normal", multi = T)
pwr = calc_pwr_emp(b0 = combo2[i,3],
b1 = combo2[i,2],
b2 = combo2[i,4],
xmat = out$xmat,
reg = "multi")
out.r5.e[i] = pwr
}
r5.e = matrix(out.r5.e, nrow = length(samp_sizes))
out.r5 = vector()
for(i in 1:nrow(combo2)){
out = gen.df(beta = c(combo2[i,3], combo2[i,2], combo2[i,4]),
n = combo2[i,1], rho = rho,
dist = "normal", multi = T)
pwr = approx_pwr(b0 = combo2[i,3],
b1 = combo2[i,2],
b2 = combo2[i,4],
n = combo2[i,1])
out.r5[i] = pwr
}
r5 = matrix(out.r5, nrow = 5)
approx_pwr
out.r5 = vector()
for(i in 1:nrow(combo2)){
out = gen.df(beta = c(combo2[i,3], combo2[i,2], combo2[i,4]),
n = combo2[i,1], rho = rho,
dist = "normal", multi = T)
pwr = approx_pwr(b0 = combo2[i,3],
b1 = combo2[i,2],
b2 = combo2[i,4],
rho = rho,
n = combo2[i,1])
out.r5[i] = pwr
}
r5 = matrix(out.r5, nrow = 5)
out.r5.e = vector()
for(i in 1:nrow(combo2)){
out = gen.df(beta = c(combo2[i,3], combo2[i,2], combo2[i,4]),
n = combo2[i,1], rho = rho,
dist = "normal", multi = T)
pwr = calc_pwr_emp(b0 = combo2[i,3],
b1 = combo2[i,2],
b2 = combo2[i,4],
xmat = out$xmat,
reg = "multi")
out.r5.e[i] = pwr
}
r5.e = matrix(out.r5.e, nrow = length(samp_sizes))
out.r5 = vector()
for(i in 1:nrow(combo2)){
out = gen.df(beta = c(combo2[i,3], combo2[i,2], combo2[i,4]),
n = combo2[i,1], rho = rho,
dist = "normal", multi = T)
pwr = approx_pwr(b0 = combo2[i,3],
b1 = combo2[i,2],
b2 = combo2[i,4],
rho = rho,
n = combo2[i,1])
out.r5[i] = pwr
}
r5 = matrix(out.r5, nrow = 6)
matplot(y = r5.e, type = "l", lty = "dotdash", lwd = 2, col = 2:7,
main = "Estimated power for varying sample and log odds ratio b1",
sub = paste("case proportion = ", proportions[3]*100, "%",
".based on bivariate normal with rho = ", rho),
xlab = "N/10", ylab = "Power",
xlim = c(0, 100), ylim = c(0, 1), add = F)
matplot(y = r5, type = "l", lty = "dotdash", lwd = 2, col = 8, add = T)
legend("right",
c("b1 = .68", "b1 = .49", "b1 = .33", "b1 = .29", "b1 = .20", "b1 = .11"),
cex=0.8, fill = 2:7)
legend("bottom", "calculated powers", cex=0.8, fill = 8)
> par(mfrow=c(1,1))
par(mfrow=c(1,1))
matplot(y = r5.e, type = "l", lty = "dotdash", lwd = 2, col = 2:7,
main = "Estimated power for varying sample and log odds ratio b1",
sub = paste("case proportion = ", proportions[3]*100, "%",
".based on bivariate normal with rho = ", rho),
xlab = "N/10", ylab = "Power",
xlim = c(0, 100), ylim = c(0, 1), add = F)
matplot(y = r5, type = "l", lty = "dotdash", lwd = 2, col = 8, add = T)
legend("right",
c("b1 = .68", "b1 = .49", "b1 = .33", "b1 = .29", "b1 = .20", "b1 = .11"),
cex=0.8, fill = 2:7)
legend("bottom", "calculated powers", cex=0.8, fill = 8)
matplot(y = r5.e, type = "l", lty = "dotdash", lwd = 2, col = 2:7,
main = "Estimated power for varying sample and log odds ratio b1",
sub = paste("case proportion = ", proportions[3]*100, "%",
".based on bivariate normal with rho = ", rho),
xlab = "N/10", ylab = "Power",
xlim = c(0, 100), ylim = c(0, 1), add = F)
out.r5.e = vector()
for(i in 1:nrow(combo2)){
out = gen.df(beta = c(combo2[i,3], combo2[i,2], combo2[i,4]),
n = combo2[i,1], rho = rho,
dist = "normal", multi = T)
pwr = calc_pwr_emp(b0 = combo2[i,3],
b1 = combo2[i,2],
b2 = combo2[i,4],
xmat = out$xmat,
reg = "multi")
out.r5.e[i] = pwr
}
r5.e = matrix(out.r5.e, nrow = 6)
matplot(y = r5, type = "l", lty = "dotdash", lwd = 2, col = 8, add = T)
out.r5.e = vector()
for(i in 1:nrow(combo2)){
out = gen.df(beta = c(combo2[i,3], combo2[i,2], combo2[i,4]),
n = combo2[i,1], rho = rho,
dist = "normal", multi = T)
pwr = calc_pwr_emp(b0 = combo2[i,3],
b1 = combo2[i,2],
b2 = combo2[i,4],
xmat = out$xmat,
reg = "multi")
out.r5.e[i] = pwr
}
r5.e = matrix(out.r5.e, nrow = 6)
out.r5 = vector()
for(i in 1:nrow(combo2)){
out = gen.df(beta = c(combo2[i,3], combo2[i,2], combo2[i,4]),
n = combo2[i,1], rho = rho,
dist = "normal", multi = T)
pwr = approx_pwr(b0 = combo2[i,3],
b1 = combo2[i,2],
b2 = combo2[i,4],
rho = rho,
n = combo2[i,1])
out.r5[i] = pwr
}
r5 = matrix(out.r5, nrow = 6)
matplot(y = r5.e, type = "l", lty = "dotdash", lwd = 2, col = 2:7,
main = "Estimated power for varying sample and log odds ratio b1",
sub = paste("case proportion = ", proportions[3]*100, "%",
".based on bivariate normal with rho = ", rho),
xlab = "N/10", ylab = "Power",
xlim = c(0, 100), ylim = c(0, 1), add = F)
matplot(y = r5, type = "l", lty = "dotdash", lwd = 2, col = 8, add = T)
out.r5.e = vector()
for(i in 1:nrow(combo2)){
out = gen.df(beta = c(combo2[i,3], combo2[i,2], combo2[i,4]),
n = combo2[i,1], rho = rho,
dist = "normal", multi = T)
pwr = calc_pwr_emp(b0 = combo2[i,3],
b1 = combo2[i,2],
b2 = combo2[i,4],
xmat = out$xmat,
reg = "multi")
out.r5.e[i] = pwr
}
r5.e = matrix(out.r5.e, nrow = length(samp_sizes))
out.r5 = vector()
for(i in 1:nrow(combo2)){
out = gen.df(beta = c(combo2[i,3], combo2[i,2], combo2[i,4]),
n = combo2[i,1], rho = rho,
dist = "normal", multi = T)
pwr = approx_pwr(b0 = combo2[i,3],
b1 = combo2[i,2],
b2 = combo2[i,4],
rho = rho,
n = combo2[i,1])
out.r5[i] = pwr
}
r5 = matrix(out.r5, nrow = length(samp_sizes))
matplot(y = r5.e, type = "l", lty = "dotdash", lwd = 2, col = 2:7,
main = "Estimated power for varying sample and log odds ratio b1",
sub = paste("case proportion = ", proportions[3]*100, "%",
".based on bivariate normal with rho = ", rho),
xlab = "N/10", ylab = "Power",
xlim = c(0, 100), ylim = c(0, 1), add = F)
matplot(y = r5, type = "l", lty = "dotdash", lwd = 2, col = 8, add = T)
legend("right",
c("b1 = .68", "b1 = .49", "b1 = .33", "b1 = .29", "b1 = .20", "b1 = .11"),
cex=0.8, fill = 2:7)
legend("bottom", "calculated powers", cex=0.8, fill = 8)
matplot(y = r5.e, type = "l", lty = "dotdash", lwd = 2, col = 2:7,
main = "Estimated power for varying sample and log odds ratio b1",
sub = paste("case proportion = ", proportions[3]*100, "%",
".based on bivariate normal with rho = ", rho),
xlab = "N/10", ylab = "Power",
xlim = c(0, 100), ylim = c(0, 1), add = F)
matplot(y = r5, type = "l", lty = "dotdash", lwd = 2, col = 8, add = T)
legend("right",
c("b1 = .68", "b1 = .49", "b1 = .33", "b1 = .29", "b1 = .20", "b1 = .11"),
cex=0.8, fill = 2:7)
legend("bottom", "calculated powers", cex=0.8, fill = 8)
r1.diff.4 = r1 - r1.sim.4
matplot(y = r1.diff.4, type = "l", lty = "dotdash", lwd = 2, col = 1:4,
main = "Difference between calculated and simulated powers",
sub = "Over varying sample sizes (10 to 1000) and case proportions (2%, 10%, 25%, 50%)",
xlab = "N/10", ylab = "power difference",
xlim = c(0, 100), ylim = c(-.05, .05), add = F)
abline(h = 0, col = 8, lwd = 2)
legend("topright", paste("case proportion = ", c("2%", "10%", "25%", "50%")), col = 1:4, cex=1, fill = 1:4)
r1.diff.per.4 = (r1 - r1.sim.4)/r1.sim.4*100
matplot(y = r1.diff.per.4, type = "l", lty = "dotdash", lwd = 2, col = 1:4,
main = "Percentage (%) difference between calculated and simulated powers",
sub = "Over varying sample sizes (10 to 1000) and case proportions (2%, 10%, 25%, 50%)",
xlab = "N/10", ylab = "% power difference",
xlim = c(0, 100), ylim = c(-20, 40), add = F)
abline(h = 0, col = 8, lwd = 2)
legend("topright", paste("case proportion = ", c("2%", "10%", "25%", "50%")), col = 1:4, cex=1, fill = 1:4)
setwd("~/OneDrive-UW/Thesis/powerlog")
